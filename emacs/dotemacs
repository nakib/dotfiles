;; For this bug (on the old emacs v26.1 on SOL45):
;; https://lists.gnu.org/archive/html/help-gnu-emacs/2020-01/msg00164.html
;;(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")

;; Set package archives
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			 ("melpa" . "https://melpa.org/packages/")
			 ("melpa-stable" . "https://stable.melpa.org/packages/")))

;; Make sure use-package is always used
;; Source: https://gitlab.com/skybert/my-little-friends/-/blob/master/emacs/.emacs
(condition-case nil
    (require 'use-package)
  (file-error
   (require 'package)
   (package-initialize)
   (package-refresh-contents)
   (package-install 'use-package)
   (setq use-package-always-ensure t)
   (require 'use-package)))

;; Get quelpa [https://github.com/quelpa/quelpa]
(unless (package-installed-p 'quelpa)
  (with-temp-buffer
    (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
    (eval-buffer)
    (quelpa-self-upgrade)))

;;;;;;;;;;;;;;;;;; begin visual jazz ;;;;;;;;;;;;;;;;;;

;; Don't show startup screen
(setq inhibit-startup-screen t)

;; Set scratch buffer message
(setq initial-scratch-message
      ";; This is your scratch space. Nothing here will be saved. Go nuts!!\n")

;; Set zoom level
(set-face-attribute 'default nil :height 148)

;; Remove tool bar
(tool-bar-mode 0)

;; Stop cursor for blinking
(blink-cursor-mode 0)

;; Show both row and column numbers at the bottom in the mode line
(column-number-mode 1)

;; Nice line wrap
(global-visual-line-mode 1)

;; Highlight matcing parens
(show-paren-mode 1)

;; Go to address at point
(global-set-key (kbd "C-c <RET>") 'goto-address-at-point)

;; Allow overwriting region by selecting and inserting text
(delete-selection-mode 1)

;; Jump to last cursor location when file is opened
(save-place-mode 1)

;; Enable recent file mode and set shortcut
(recentf-mode 1)
(global-set-key (kbd "C-x C-r") 'recentf-open-files)

;; Enable Hippie-exapand and replace M-/ to call it instead of dynamic expand
(global-set-key (kbd "M-/") 'hippie-expand)

;; Enable case-insensitive search
(setq case-fold-search t)

;; Set theme
;; Did this by invoking M-x customize-themes and choosing the modus-vivendi theme.

;; Set default transparency which can be toggled with C-c t
;; Source: https://www.emacswiki.org/emacs/TransparentEmacs
;;(set-frame-parameter (selected-frame) 'alpha '(<active> . <inactive>))
;;(set-frame-parameter (selected-frame) 'alpha <both>)
(set-frame-parameter (selected-frame) 'alpha '(90 . 70))
(add-to-list 'default-frame-alist '(alpha . (90 . 70)))
(defun toggle-transparency ()
  ;; Toggle transparency
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ;; Also handle undocumented (<active> <inactive>) form.
                    ((numberp (cadr alpha)) (cadr alpha)))
              100)
         '(85 . 50) '(100 . 100)))))
(global-set-key (kbd "C-c t") 'toggle-transparency)

;; Set default tmp file directory
(setq backup-directory-alist 
      '(("." . "~/.emacs.d/file-backups")))

;; Define shortcuts for window resize
(global-set-key (kbd "C-c <C-left>") 'shrink-window-horizontally)
(global-set-key (kbd "C-c <C-right>") 'enlarge-window-horizontally)
(global-set-key (kbd "C-c <C-down>") 'shrink-window)
(global-set-key (kbd "C-c <C-up>") 'enlarge-window)

;; Nerd icons
;; Source: https://github.com/rainstormstudio/nerd-icons.el
;; Need to install the fonts first by saying:
;; M-x package-install nerd-icons-install-fonts
(use-package nerd-icons
  :ensure t
  ;; :custom
  ;; The Nerd Font you want to use in GUI
  ;; "Symbols Nerd Font Mono" is the default and is recommended
  ;; but you can use any other Nerd Font if you want
  ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
  )

;; Doom modeline
;; Source https://github.com/seagle0128/doom-modeline
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))

;; Beacon mode
(use-package beacon
  :ensure t
  :init (beacon-mode 1))
(setq beacon-color "#237fd2")


;; Show a pulse light when switching windows, or switching focus to
;; the minibuffer.
;; Source: https://gitlab.com/skybert/my-little-friends/-/blob/master/emacs/.emacs
(require 'pulse)
(set-face-attribute 'pulse-highlight-start-face nil :background beacon-color)
(add-hook 'window-selection-change-functions
          (lambda (frame)
            (when (eq frame (selected-frame))
              (pulse-momentary-highlight-one-line))))

;;;;;;;;;;;;;;;;;; end visual jazz ;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;; begin magit stuff ;;;;;;;;;;;;;;;;;;
(use-package magit
  :ensure t)
;;;;;;;;;;;;;;;;;; end magit stuff ;;;;;;;;;;;;;;;;;;

;; org-mode mode related config
(setq org-ellipsis "â¤¦")
(use-package org-bullets :ensure t)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

(setq org-hide-leading-stars t)

(setq org-todo-keywords
      '((sequence "SOMEDAY(s)" "NEXT(n)" "TODO(n)" "IN-PROGRESS(i)" "|" "DONE(d)")
	(sequence "WAITING(w@/!)" "DELEGATED(-@/!)" "|" "CANCELLED(c@/!)")))

(setq org-tag-persistent-alist
		'((:startgroup . nil)
		  ("PERSONAL" . ?p)
		  ("WORK" . ?w)
		  (:endgroup . nil)
		  (:startgroup . nil)
		  ("DOCTOR" . ?d)
		  ("REIMBURSEMENT" . ?r)
		  ("BUREAUCRACY" . ?b)
		  ("TRAVEL" . ?t)
		  (:endgroup . nil)
		  (:startgroup . nil)
		  ("SHORTTERM" . ?s)
		  ("MEDIUMTERM" . ?m)
		  ("LONGTERM" . ?l)
		  (:endgroup . nil)))

;; Implementation of Nickolas Lanasa's system
;; Source: https://www.youtube.com/watch?v=oG9jP0SsPqQ
;;;;

;; LaTex mode related config
(package-install 'auctex)
;;;;

;; Company mode (for code completion)
(package-install 'company)
(global-company-mode t)
(add-hook 'after-init-hook 'global-company-mode)
;;

;; Yasnippet
(package-install 'yasnippet)
(require 'yasnippet)
(yas-global-mode 1)

;; LSP common settings
(require 'lsp-mode)
(setq lsp-eldoc-render-all t)
;;  Set shortcut for M-x eldoc-doc-buffer
(add-hook 'lsp-mode-hook
 	  (lambda ()
 	    (local-set-key (kbd "C-h <SPC>") 'eldoc-doc-buffer)))

;;;  Fortran
;; First need to do this: pip3 install fortls
;; If the above does not work, try sudo apt install fortran-language-server on debian-based systems
(add-hook 'f90-mode-hook #'lsp-deferred)

;;; Julia
;; Instructions from https://hershsingh.net/blog/emacs-julia/
(quelpa '(lsp-julia :fetcher github
                    :repo "non-Jedi/lsp-julia"
                    :files (:defaults "languageserver")))

(use-package lsp-julia
  :config
  (setq lsp-julia-default-environment "~/.julia/environments/v1.9.2"))

(add-hook 'julia-mode-hook #'lsp-deferred)

;;; C/C++
; First need to install:
; sudo apt-get install clangd-15
; sudo update-alternatives --install /usr/bin/clangd clangd /usr/bin/clangd-15 100
(add-hook 'c-mode-hook 'lsp #'lsp-deferred)
(add-hook 'c++-mode-hook 'lsp #'lsp-deferred)

;; Python lsp using lsp-mode
; First need to do this: pip3 install python-lsp-server
;(add-hook 'python-mode-hook #'lsp-deferred)

;;; Python lsp using company+eglot
;;; Source: https://whatacold.io/blog/2022-01-22-emacs-eglot-lsp/
;;; Need a python lsp: pip3 install 'python-language-server[all]'
;
;(package-install 'eglot)
;(require 'eglot)
;
;(define-key eglot-mode-map (kbd "C-c <tab>") #'company-complete) ; initiate the completion manually
;(define-key eglot-mode-map (kbd "C-c e f n") #'flymake-goto-next-error)
;(define-key eglot-mode-map (kbd "C-c e f p") #'flymake-goto-prev-error)
;(define-key eglot-mode-map (kbd "C-c e r") #'eglot-rename)
;
;(setq eldoc-echo-area-use-multiline-p nil)
;(add-to-list 'display-buffer-alist
;             '("^\\*eldoc for" display-buffer-at-bottom
;               (window-height . 4)))
;

;;; python venv for LSP
;;; How to create an environment: python3 -m venv ~/python3-workspace/virtualenv
;(package-install 'pyvenv)
;(pyvenv-activate "~/python3-workspace/virtualenv/")

;;;;;;;;;;;;;;; begin off-limits ;;;;;;;;;;;;;;; 
;; Don't touch the stuff below:
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes '(modus-vivendi))
 '(package-selected-packages
   '(magit yasnippet use-package quelpa org-bullets lsp-julia doom-modeline company auctex)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
;;;;;;;;;;;;;;; end off-limits ;;;;;;;;;;;;;;;
